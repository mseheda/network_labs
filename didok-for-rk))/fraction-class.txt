#include <iostream>
#include <numeric> // для std::gcd

class Fraction {
private:
    int numerator;
    int denominator;

    void simplify() {
        int gcd = std::gcd(numerator, denominator);
        numerator /= gcd;
        denominator /= gcd;
        if (denominator < 0) { // Зробимо знаменник завжди позитивним
            numerator = -numerator;
            denominator = -denominator;
        }
    }

public:
    // Конструктор за замовчуванням
    Fraction(int num = 0, int den = 1) : numerator(num), denominator(den) {
        if (den == 0) {
            throw std::invalid_argument("Denominator cannot be zero.");
        }
        simplify();
    }

    // Оператор додавання
    Fraction operator+(const Fraction& other) const {
        return Fraction(
            numerator * other.denominator + other.numerator * denominator,
            denominator * other.denominator
        );
    }

    // Оператор віднімання
    Fraction operator-(const Fraction& other) const {
        return Fraction(
            numerator * other.denominator - other.numerator * denominator,
            denominator * other.denominator
        );
    }

    // Оператор множення
    Fraction operator*(const Fraction& other) const {
        return Fraction(numerator * other.numerator, denominator * other.denominator);
    }

    // Оператор ділення
    Fraction operator/(const Fraction& other) const {
        if (other.numerator == 0) {
            throw std::invalid_argument("Division by zero.");
        }
        return Fraction(numerator * other.denominator, denominator * other.numerator);
    }

    // Оператори порівняння
    bool operator==(const Fraction& other) const {
        return numerator == other.numerator && denominator == other.denominator;
    }

    bool operator!=(const Fraction& other) const {
        return !(*this == other);
    }

    bool operator<(const Fraction& other) const {
        return numerator * other.denominator < other.numerator * denominator;
    }

    bool operator>(const Fraction& other) const {
        return numerator * other.denominator > other.numerator * denominator;
    }

    bool operator<=(const Fraction& other) const {
        return !(*this > other);
    }

    bool operator>=(const Fraction& other) const {
        return !(*this < other);
    }

    // Дружня функція для виводу дробу
    friend std::ostream& operator<<(std::ostream& os, const Fraction& frac) {
        os << frac.numerator << "/" << frac.denominator;
        return os;
    }

    // Дружня функція для вводу дробу
    friend std::istream& operator>>(std::istream& is, Fraction& frac) {
        char slash;
        is >> frac.numerator >> slash >> frac.denominator;
        if (frac.denominator == 0) {
            throw std::invalid_argument("Denominator cannot be zero.");
        }
        frac.simplify();
        return is;
    }
};

int main() {
    try {
        Fraction f1(1, 2); // 1/2
        Fraction f2(3, 4); // 3/4

        std::cout << "f1: " << f1 << ", f2: " << f2 << "\n";

        // Демонстрація арифметичних операцій
        std::cout << "f1 + f2 = " << (f1 + f2) << "\n";
        std::cout << "f1 - f2 = " << (f1 - f2) << "\n";
        std::cout << "f1 * f2 = " << (f1 * f2) << "\n";
        std::cout << "f1 / f2 = " << (f1 / f2) << "\n";

        // Демонстрація порівнянь
        std::cout << "f1 == f2: " << (f1 == f2) << "\n";
        std::cout << "f1 != f2: " << (f1 != f2) << "\n";
        std::cout << "f1 < f2: " << (f1 < f2) << "\n";
        std::cout << "f1 > f2: " << (f1 > f2) << "\n";

        // Ввід дробу
        Fraction f3;
        std::cout << "Enter a fraction (numerator/denominator): ";
        std::cin >> f3;
        std::cout << "You entered: " << f3 << "\n";
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << "\n";
    }

    return 0;
}
